{"src/wazuh/controllers/wazuh.controller.ts":"@@ -4,6 +4,7 @@ import {\n     Delete,\n     Get,\n     Param,\n+    ParseIntPipe,\n     Post,\n     Put,\n     Query,\n@@ -238,14 +239,26 @@ export class WazuhController {\n     @Get('vulnerability-info/:agentid')\n     @ApiOperation({\n         summary:\n-            'Devuelve toda la información de las vulnerabilidades de un agente.',\n+            'Devuelve toda la información de las vulnerabilidades de un agente paginada.',\n     })\n     @ApiParam({\n         name: 'agentid',\n         description:\n-            'ID del agente del que recuperar todas sus vulnerabilidades',\n+            'ID del agente del que recuperar sus vulnerabilidades',\n         example: 50,\n     })\n+    @ApiQuery({\n+        name: 'page',\n+        required: false,\n+        description: 'Page number',\n+        example: 1,\n+    })\n+    @ApiQuery({\n+        name: 'pageSize',\n+        required: false,\n+        description: 'Page size',\n+        example: 10,\n+    })\n     @ApiResponse({\n         status: 200,\n         description: 'Data recovered successfully',\n@@ -254,8 +267,10 @@ export class WazuhController {\n     async getVulnerabilitiesInfo(\n         @Param('agentid') id: number,\n         @ActiveUser() user: UserActiveInterface,\n+        @Query('page') page: number = 1,\n+        @Query('pageSize') pageSize: number = 10,\n     ) {\n-        return await this.indexerService.getVulnerabilities(user, id);\n+        return await this.indexerService.getPaginatedVulnerabilities(user, id, page, pageSize);\n     }\n \n     @UseInterceptors(WazuhConnectionInterceptor)\n@@ -274,11 +289,19 @@ export class WazuhController {\n         description: 'Data recovered successfully',\n         type: InventorySoftwareOutputDTO,\n     })\n+    @ApiQuery({name: 'updatesPage', example: 1, required: false, type: Number})\n+    @ApiQuery({name: 'updatesPageSize', example: 10, required: false, type: Number})\n+    @ApiQuery({name: 'packagesPage', example: 1, required: false, type: Number})\n+    @ApiQuery({name: 'packagesPageSize', example: 10, required: false, type: Number})\n     async getInventorySoftware(\n         @Param('agentid') id: number,\n         @ActiveUser() user: UserActiveInterface,\n+        @Query('updatesPage', ParseIntPipe) updatesPage: number = 1,\n+        @Query('updatesPageSize', ParseIntPipe) updatesPageSize: number = 10,\n+        @Query('packagesPage', ParseIntPipe) packagesPage: number = 1,\n+        @Query('packagesPageSize', ParseIntPipe) packagesPageSize: number = 10,\n     ) {\n-        return await this.wazuhService.getDataSoftware(id, user);\n+        return await this.wazuhService.getDataSoftware(id, user, updatesPage, updatesPageSize, packagesPage, packagesPageSize);\n     }\n \n     @UseInterceptors(WazuhConnectionInterceptor)\n@@ -296,11 +319,32 @@ export class WazuhController {\n         description: 'Data recovered successfully',\n         type: InventoryNetworkOutputDTO,\n     })\n+    @ApiQuery({name: 'interfacePage', example: 1, required: false, type: Number})\n+    @ApiQuery({name: 'interfacePageSize', example: 10, required: false, type: Number})\n+    @ApiQuery({name: 'portPage', example: 1, required: false, type: Number})\n+    @ApiQuery({name: 'portPageSize', example: 10, required: false, type: Number})\n+    @ApiQuery({name: 'networkPage', example: 1, required: false, type: Number})        \n+    @ApiQuery({name: 'networkPageSize', example: 10, required: false, type: Number})\n     async getInventoryNetwork(\n         @Param('agentid') id: number,\n         @ActiveUser() user: UserActiveInterface,\n+        @Query('interfacePage', ParseIntPipe) interfacePage: number = 1,\n+        @Query('interfacePageSize', ParseIntPipe) interfacePageSize: number = 10,\n+        @Query('portPage', ParseIntPipe) portPage: number = 1,\n+        @Query('portPageSize', ParseIntPipe) portPageSize: number = 10,\n+        @Query('networkPage', ParseIntPipe) networkPage: number = 1,\n+        @Query('networkPageSize', ParseIntPipe) networkPageSize: number = 10,\n     ) {\n-        return await this.wazuhService.getDataNetwork(id, user);\n+        return await this.wazuhService.getDataNetwork(\n+            id,\n+            user,\n+            interfacePage,\n+            interfacePageSize,\n+            portPage,\n+            portPageSize,\n+            networkPage,\n+            networkPageSize,\n+        );\n     }\n \n     @UseInterceptors(WazuhConnectionInterceptor)\n@@ -319,11 +363,15 @@ export class WazuhController {\n         description: 'Data recovered successfully',\n         type: InventoryProcessesOutputDTO,\n     })\n+    @ApiQuery({name: 'page', example: 1, required: false, type: Number})\n+    @ApiQuery({name: 'pageSize', example: 10, required: false, type: Number})\n     async getInventoryProcesses(\n         @Param('agentid') id: number,\n         @ActiveUser() user: UserActiveInterface,\n+        @Query('page', ParseIntPipe) page: number = 1,\n+        @Query('pageSize', ParseIntPipe) pageSize: number = 10,\n     ) {\n-        return await this.wazuhService.getDataProcesses(id, user);\n+        return await this.wazuhService.getDataProcesses(id, user, page, pageSize);\n     }\n \n     /*","src/wazuh/dto-outputs/inventory-network.output.dto.ts":"@@ -2,6 +2,7 @@ import { ApiProperty } from '@nestjs/swagger';\n import { Type } from 'class-transformer';\n import { IsDate, IsInt, IsNotEmpty, IsNumber, IsString, ValidateNested } from 'class-validator';\n import { SystemInfoDTO } from './inventory-software.output.dto';\n+import { OutPaginateInterface } from 'src/common/interfaces/out-paginated.interface';\n \n export class WazuhInterfacesDTO {\n     @ApiProperty({\n@@ -139,54 +140,57 @@ export class WazuhNetworkSettingsDTO {\n  */\n export class InventoryNetworkOutputDTO {\n     @ApiProperty({\n-        type: [SystemInfoDTO],\n-        example: [\n-            {\n-                hostname: 'DESKTOP-AGBAB0C',\n-                cores: 12,\n-                memory: '16076.87 MB',\n-                architecture: 'x86_64',\n-                operative_system: 'Microsoft Windows 11 Pro',\n-                cpu: '12th Gen Intel(R) Core(TM) i5-12450H',\n-                motherboard: 'PF4M50TH',\n-                last_scan: '2025-02-05T07:56:16+00:00',\n-            },\n-        ],\n+        type: SystemInfoDTO,\n+        example: {\n+            hostname: 'DESKTOP-AGBAB0C',\n+            cores: 12,\n+            memory: '16076.87 MB',\n+            architecture: 'x86_64',\n+            operative_system: 'Microsoft Windows 11 Pro',\n+            cpu: '12th Gen Intel(R) Core(TM) i5-12450H',\n+            motherboard: 'PF4M50TH',\n+            last_scan: '2025-02-05T07:56:16+00:00',\n+        },\n     })\n-    @ValidateNested({ each: true })\n     @Type(() => SystemInfoDTO)\n-    system: SystemInfoDTO[];\n-\n-    @ApiProperty({\n-        type: [WazuhInterfacesDTO],\n-        example: [\n-            {\n-                name: 'eth0',\n-                mac: '00:1A:2B:3C:4D:5E',\n-                state: 'up',\n-                mtu: 1500,\n-                type: 'ethernet',\n-                adapter: 'Ethernet adapter',\n-                scan_time: '2025-02-05T07:56:16+00:00',\n-            },\n-            {\n-                name: 'wlan0',\n-                mac: '00:1A:2B:3C:4D:5F',\n-                state: 'down',\n-                mtu: 1400,\n-                type: 'wireless',\n-                adapter: 'Wi-Fi adapter',\n-                scan_time: '2025-02-05T07:56:16+00:00',\n-            },\n-        ],\n+    system: SystemInfoDTO;\n+\n+    @ApiProperty({\n+        type: WazuhInterfacesDTO,\n+        example: {\n+            content: [\n+                {\n+                    name: 'eth0',\n+                    mac: '00:1A:2B:3C:4D:5E',\n+                    state: 'up',\n+                    mtu: 1500,\n+                    type: 'ethernet',\n+                    adapter: 'Ethernet adapter',\n+                    scan_time: '2025-02-05T07:56:16+00:00',\n+                },\n+                {\n+                    name: 'wlan0',\n+                    mac: '00:1A:2B:3C:4D:5F',\n+                    state: 'down',\n+                    mtu: 1400,\n+                    type: 'wireless',\n+                    adapter: 'Wi-Fi adapter',\n+                    scan_time: '2025-02-05T07:56:16+00:00',\n+                },\n+            ],\n+            page: 1,\n+            pageSize: 10,\n+            total: 2,\n+        }\n     })\n     @ValidateNested({ each: true })\n     @Type(() => WazuhInterfacesDTO)\n-    interfaces: WazuhInterfacesDTO[];\n+    interfaces: OutPaginateInterface<WazuhInterfacesDTO>;\n \n     @ApiProperty({\n-        type: [WazuhPortsDTO],\n-        example: [\n+        type: WazuhPortsDTO,\n+        example: {\n+            content: [\n             {\n                 local_port: 80,\n                 local_id: '0.0.0.0',\n@@ -202,14 +206,19 @@ export class InventoryNetworkOutputDTO {\n                 protocol: 'tcp',\n             },\n         ],\n+        page: 1,\n+        pageSize: 10,\n+        total: 2,\n+    }\n     })\n     @ValidateNested({ each: true })\n     @Type(() => WazuhPortsDTO)\n-    ports: WazuhPortsDTO[];\n+    ports: OutPaginateInterface<WazuhPortsDTO>;\n \n     @ApiProperty({\n-        type: [WazuhNetworkSettingsDTO],\n-        example: [\n+        type: WazuhNetworkSettingsDTO,\n+        example: {\n+            content: [\n             {\n                 iface: 'eth0',\n                 address: '192.168.1.1',\n@@ -225,29 +234,11 @@ export class InventoryNetworkOutputDTO {\n                 broadcast: '127.255.255.255',\n             },\n         ],\n-    })\n+        page: 1,\n+        pageSize: 10,\n+        total: 2,\n+    } })\n     @ValidateNested({ each: true })\n     @Type(() => WazuhNetworkSettingsDTO)\n-    config: WazuhNetworkSettingsDTO[];\n-\n-    @ApiProperty({\n-        example: 2,\n-    })\n-    @IsInt()\n-    @IsNotEmpty()\n-    total_interfaces: number;\n-\n-    @ApiProperty({\n-        example: 2,\n-    })\n-    @IsInt()\n-    @IsNotEmpty()\n-    total_ports: number;\n-\n-    @ApiProperty({\n-        example: 2,\n-    })\n-    @IsInt()\n-    @IsNotEmpty()\n-    total_network_settings: number;\n+    config: OutPaginateInterface<WazuhNetworkSettingsDTO>;\n }","src/wazuh/dto-outputs/inventory-processes.output.dto.ts":"@@ -2,6 +2,7 @@ import { ApiProperty } from '@nestjs/swagger';\n import { Type } from 'class-transformer';\n import { IsDate, IsInt, IsNotEmpty, IsString, ValidateNested } from 'class-validator';\n import { SystemInfoDTO } from './inventory-software.output.dto';\n+import { OutPaginateInterface } from 'src/common/interfaces/out-paginated.interface';\n \n export class WazuhProcessesDTO {\n     @ApiProperty({\n@@ -79,8 +80,8 @@ export class WazuhProcessesDTO {\n  */\n export class InventoryProcessesOutputDTO {\n     @ApiProperty({\n-        type: [SystemInfoDTO],\n-        example: [\n+        type: SystemInfoDTO,\n+        example: \n             {\n                 hostname: 'DESKTOP-AGBAB0C',\n                 cores: 12,\n@@ -91,15 +92,13 @@ export class InventoryProcessesOutputDTO {\n                 motherboard: 'PF4M50TH',\n                 last_scan: '2025-02-05T07:56:16+00:00',\n             },\n-        ],\n     })\n-    @ValidateNested({ each: true })\n     @Type(() => SystemInfoDTO)\n-    system: SystemInfoDTO[];\n+    system: SystemInfoDTO;\n \n     @ApiProperty({\n-        type: [WazuhProcessesDTO],\n-        example: [\n+        type: WazuhProcessesDTO,\n+        example: { content: [\n             {\n                 name: 'System',\n                 pid: '1234',\n@@ -123,15 +122,12 @@ export class InventoryProcessesOutputDTO {\n                 scan_time: '2025-02-05T07:56:16+00:00',\n             },\n         ],\n+        page: 1,\n+        pageSize: 10,\n+        total: 2,\n+    },\n     })\n     @ValidateNested({ each: true })\n     @Type(() => WazuhProcessesDTO)\n-    processes: WazuhProcessesDTO[];\n-\n-    @ApiProperty({\n-        example: 2,\n-    })\n-    @IsInt()\n-    @IsNotEmpty()\n-    total_processes: number;\n+    processes: OutPaginateInterface<WazuhProcessesDTO>;\n }","src/wazuh/dto-outputs/inventory-software.output.dto.ts":"@@ -1,6 +1,7 @@\n import { ApiProperty } from '@nestjs/swagger';\n import { Type } from 'class-transformer';\n import { IsDate, IsInt, IsNotEmpty, IsNumber, IsString, ValidateNested } from 'class-validator';\n+import { OutPaginateInterface } from 'src/common/interfaces/out-paginated.interface';\n \n export class SystemInfoDTO {\n     @ApiProperty({\n@@ -173,8 +174,8 @@ export class PackagesDTO {\n  */\n export class InventorySoftwareOutputDTO {\n     @ApiProperty({\n-        type: [SystemInfoDTO],\n-        example: [\n+        type: SystemInfoDTO,\n+        example: \n             {\n                 hostname: 'DESKTOP-AGBAB0C',\n                 cores: 12,\n@@ -184,16 +185,14 @@ export class InventorySoftwareOutputDTO {\n                 cpu: '12th Gen Intel(R) Core(TM) i5-12450H',\n                 motherboard: 'PF4M50TH',\n                 last_scan: '2025-02-05T07:56:16+00:00',\n-            },\n-        ],\n+            }\n     })\n-    @ValidateNested({ each: true })\n     @Type(() => SystemInfoDTO)\n-    system: SystemInfoDTO[];\n+    system: SystemInfoDTO;\n \n     @ApiProperty({\n-        type: [UpdatesDTO],\n-        example: [\n+        type: UpdatesDTO,\n+        example: {content:[\n             {\n                 hotfix: 'KB2468871',\n                 scan_time: '2025-01-24T13:51:06+00:00',\n@@ -207,14 +206,18 @@ export class InventorySoftwareOutputDTO {\n                 scan_time: '2025-01-24T13:51:06+00:00',\n             },\n         ],\n+        page: 1,\n+        pageSize: 10,\n+        total: 3,\n+    },\n     })\n     @ValidateNested({ each: true })\n     @Type(() => UpdatesDTO)\n-    updates: UpdatesDTO[];\n+    updates: OutPaginateInterface<UpdatesDTO>;\n \n     @ApiProperty({\n-        type: [PackagesDTO],\n-        example: [\n+        type: PackagesDTO,\n+        example: { content: [\n             {\n                 name: 'Authenticator',\n                 format: 'pkg',\n@@ -259,22 +262,12 @@ export class InventorySoftwareOutputDTO {\n                 description: 'An example package for demonstration purposes',\n             },\n         ],\n+        page: 1,\n+        pageSize: 10,\n+        total: 3,\n+    },\n     })\n     @ValidateNested({ each: true })\n     @Type(() => PackagesDTO)\n-    packages: PackagesDTO[];\n-\n-    @ApiProperty({\n-        example: 3,\n-    })\n-    @IsInt()\n-    @IsNotEmpty()\n-    total_updates: number;\n-\n-    @ApiProperty({\n-        example: 3,\n-    })\n-    @IsInt()\n-    @IsNotEmpty()\n-    total_packages: number;\n+    packages: OutPaginateInterface<PackagesDTO>;\n }","src/wazuh/services/indexer.service.ts":"@@ -9,6 +9,7 @@ import { VulnerabilitiesDashboardOutputDTO } from '../dto-outputs/vulnera-dashbo\n import { VulnerabilityInfoDTO } from '../dto-outputs/vulnera-info.output.dto';\n import { WazuhService } from './wazuh.service';\n import { WazuhBaseService } from './wazuh-base.service';\n+import { OutPaginateInterface } from 'src/common/interfaces/out-paginated.interface';\n \n /**\n  * ### IndexerService\n@@ -178,4 +179,94 @@ export class IndexerService extends ApiRequest {\n \n         return vulnerabilities;\n     }\n+\n+\n+    public async getPaginatedVulnerabilities(\n+        user: UserActiveInterface,\n+        id: number,\n+        page = 1,\n+        pageSize = 10,\n+    ): Promise<OutPaginateInterface<VulnerabilityInfoDTO>> {\n+        if (!(await this.wazuhService.checkAgentPermissions(user.id, id))) {\n+            throw new ErrorManager({\n+                type: 'NOT_FOUND',\n+                message: this.i18n.t('error.WAZUH.NOT_FOUND', {\n+                    lang: user.language,\n+                }),\n+            });\n+        }\n+\n+        const agent = await this.wazuhBaseService.getAgentById(id);\n+        const formattedId = agent.agent_id.toString().padStart(3, '0');\n+\n+        const query = {\n+            query: {\n+                bool: {\n+                    must: [\n+                        { match: { 'agent.id': formattedId } },\n+                        { exists: { field: 'vulnerability' } },\n+                    ],\n+                },\n+            },\n+            from: (page - 1) * pageSize,\n+            size: pageSize,\n+        };\n+\n+        const response = await this.post(\n+            '/wazuh-states-vulnerabilities-*/_search',\n+            query,\n+            100000,\n+        );\n+\n+        const hits = response.data.hits.hits;\n+        const total = response.data.hits.total.value;\n+\n+        const vulnerabilities: VulnerabilityInfoDTO[] = hits.map((hit) => {\n+            const source = hit._source;\n+            return {\n+                agent_name: agent.public_agent_name ?? '',\n+                package_name: source.package?.name ?? '',\n+                package_version: source.package?.version ?? '',\n+                vulnerability_description: source.vulnerability?.description ?? '',\n+                vulnerability_severity: source.vulnerability?.severity ?? '',\n+                vulnerability_id: source.vulnerability?.id ?? '',\n+                agent_build_original: source.agent?.build?.original ?? '',\n+                agent_type: source.agent?.type ?? '',\n+                agent_version: source.agent?.version ?? '',\n+                host_os_full: source.host?.os?.full ?? '',\n+                host_os_kernel: source.host?.os?.kernel ?? '',\n+                host_os_name: source.host?.os?.name ?? '',\n+                host_os_platform: source.host?.os?.platform ?? '',\n+                host_os_type: source.host?.os?.type ?? '',\n+                host_os_version: source.host?.os?.version ?? '',\n+                package_architecture: source.package?.architecture ?? '',\n+                package_build_version: source.package?.build_version ?? '',\n+                package_checksum: source.package?.checksum ?? '',\n+                package_description: source.package?.description ?? '',\n+                package_install_scope: source.package?.install_scope ?? '',\n+                package_installed: source.package?.installed ?? false,\n+                package_license: source.package?.license ?? '',\n+                package_path: source.package?.path ?? '',\n+                package_reference: source.package?.reference ?? '',\n+                package_size: source.package?.size ?? 0,\n+                package_type: source.package?.type ?? '',\n+                vulnerability_category: source.vulnerability?.category ?? '',\n+                vulnerability_classification: source.vulnerability?.classification ?? '',\n+                vulnerability_detected_at: source.vulnerability?.detected_at ?? '',\n+                vulnerability_enumeration: source.vulnerability?.enumeration ?? '',\n+                vulnerability_published_at: source.vulnerability?.published_at ?? '',\n+                vulnerability_reference: source.vulnerability?.reference ?? '',\n+                vulnerability_report_id: source.vulnerability?.report_id ?? '',\n+                vulnerability_scanner_source: source.vulnerability?.scanner?.source ?? '',\n+                vulnerability_scanner_vendor: source.vulnerability?.scanner?.vendor ?? '',\n+                vulnerability_score_base: source.vulnerability?.score?.base ?? 0,\n+                vulnerability_score_environmental: source.vulnerability?.score?.environmental ?? 0,\n+                vulnerability_score_temporal: source.vulnerability?.score?.temporal ?? 0,\n+                vulnerability_score_version: source.vulnerability?.score?.version ?? '',\n+                vulnerability_under_evaluation: source.vulnerability?.under_evaluation ?? false,\n+            };\n+        });\n+\n+        return { content: vulnerabilities, page: page, pageSize: pageSize, total: total };\n+    }\n }","src/wazuh/services/wazuh-base.service.ts":"@@ -61,14 +61,14 @@ export class WazuhBaseService {\n         agentId: number,\n     ): Promise<boolean> {\n         const agent = await this.getAgentWithRelations(agentId);\n-\n+        \n         if (!agent) {\n             return false;\n         }\n \n         const user = await this.userRepository.findOne({\n             where: { id: userId },\n-            relations: ['infrastructures', 'company'],\n+            relations: ['infrastructure', 'company'],\n         });\n \n         if (!user) {","src/wazuh/services/wazuh-inventory.service.ts":"@@ -23,6 +23,7 @@ import {\n     WazuhProcessesDTO,\n } from '../dto-outputs/inventory-processes.output.dto';\n import { WazuhBaseService } from './wazuh-base.service';\n+import { OutPaginateInterface } from 'src/common/interfaces/out-paginated.interface';\n \n /**\n  * ### WazuhInventoryService\n@@ -57,53 +58,59 @@ export class WazuhInventoryService {\n         return this.wazuhBaseService.checkAgentPermissions(userId, agentId);\n     }\n \n-    public async getDataSoftware(id: number, user: UserActiveInterface) {\n+    public async getDataSoftware(\n+        id: number,\n+        user: UserActiveInterface,\n+        updatesPage = 1,\n+        updatesPageSize = 10,\n+        packagesPage = 1,\n+        packagesPageSize = 10,\n+      ): Promise<InventorySoftwareOutputDTO> {\n         if (!(await this.checkAgentPermissions(user.id, id))) {\n-            throw new ErrorManager({\n-                type: 'FORBIDDEN',\n-                message: this.i18n.t('error.WAZUH.NOT_FOUND', {\n-                    lang: user.language,\n-                }),\n-            });\n+          throw new ErrorManager({\n+            type: 'FORBIDDEN',\n+            message: this.i18n.t('error.WAZUH.NOT_FOUND', { lang: user.language }),\n+          });\n         }\n-\n+      \n         const agent = await this.wazuhBaseService.getAgentById(id);\n-\n         if (!agent) {\n-            throw new ErrorManager({\n-                type: 'NOT_FOUND',\n-                message: this.i18n.t('error.WAZUH.NOT_FOUND', {\n-                    lang: user.language,\n-                }),\n-            });\n+          throw new ErrorManager({\n+            type: 'NOT_FOUND',\n+            message: this.i18n.t('error.WAZUH.NOT_FOUND', { lang: user.language }),\n+          });\n         }\n-\n+      \n         const formatedID = agent.agent_id.toString().padStart(3, '0');\n-\n         const systemInfo = await this.getSystemInfo(formatedID);\n-        const updates = await this.wazuhAuthService.get(\n-            `/syscollector/${formatedID}/hotfixes`,\n-            null,\n-            this.dataTimeout,\n-        );\n-        const packages = await this.wazuhAuthService.get(\n-            `/syscollector/${formatedID}/packages`,\n-            null,\n-            this.dataTimeout,\n-        );\n-\n-        let updatesInfo: UpdatesDTO[] = [];\n-        let packagesInfo: PackagesDTO[] = [];\n-\n-        if (updates.data.data.affected_items.length > 0) {\n-            updatesInfo = updates.data.data.affected_items.map((item) => ({\n+      \n+        const [updatesResponse, packagesResponse] = await Promise.all([\n+          this.wazuhAuthService.get(`/syscollector/${formatedID}/hotfixes`, null, this.dataTimeout),\n+          this.wazuhAuthService.get(`/syscollector/${formatedID}/packages`, null, this.dataTimeout),\n+        ]);\n+      \n+        const updatesData = updatesResponse?.data?.data?.affected_items || [];\n+        const packagesData = packagesResponse?.data?.data?.affected_items || [];\n+      \n+        const paginatedUpdates: OutPaginateInterface<UpdatesDTO> = {\n+          content: updatesData\n+            .slice((updatesPage - 1) * updatesPageSize, updatesPage * updatesPageSize)\n+            .map(\n+              (item): UpdatesDTO => ({\n                 hotfix: item.hotfix ?? '',\n                 scan_time: new Date(item.scan_time ?? ''),\n-            }));\n-        }\n-\n-        if (packages.data.data.affected_items.length > 0) {\n-            packagesInfo = packages.data.data.affected_items.map((item) => ({\n+              }),\n+            ),\n+          page: updatesPage,\n+          pageSize: updatesPageSize,\n+          total: updatesData.length,\n+        };\n+      \n+        const paginatedPackages: OutPaginateInterface<PackagesDTO> = {\n+          content: packagesData\n+            .slice((packagesPage - 1) * packagesPageSize, packagesPage * packagesPageSize)\n+            .map(\n+              (item): PackagesDTO => ({\n                 name: item.name ?? '',\n                 format: item.format ?? '',\n                 vendor: item.vendor ?? '',\n@@ -116,21 +123,30 @@ export class WazuhInventoryService {\n                 source: item.source ?? '',\n                 size: item.size ?? 0,\n                 description: item.description ?? '',\n-            }));\n-        }\n-\n-        const outputDTO: InventorySoftwareOutputDTO = {\n-            system: systemInfo,\n-            updates: updatesInfo,\n-            packages: packagesInfo,\n-            total_updates: updatesInfo.length,\n-            total_packages: packagesInfo.length,\n+              }),\n+            ),\n+          page: packagesPage,\n+          pageSize: packagesPageSize,\n+          total: packagesData.length,\n         };\n-\n-        return outputDTO;\n-    }\n-\n-    public async getDataNetwork(id: number, user: UserActiveInterface) {\n+      \n+        return {\n+          system: systemInfo,\n+          updates: paginatedUpdates,\n+          packages: paginatedPackages,\n+        };\n+      }\n+\n+    public async getDataNetwork(\n+        id: number,\n+        user: UserActiveInterface,\n+        interfacePage = 1,\n+        interfacePageSize = 10,\n+        portPage = 1,\n+        portPageSize = 10,\n+        networkPage = 1,\n+        networkPageSize = 10,\n+    ): Promise<InventoryNetworkOutputDTO> {\n         try {\n             if (!(await this.checkAgentPermissions(user.id, id))) {\n                 throw new ErrorManager({\n@@ -154,139 +170,138 @@ export class WazuhInventoryService {\n \n             const formatedID = agent.agent_id.toString().padStart(3, '0');\n \n-            const systemInfo = await this.getSystemInfo(formatedID);\n-            const netiface = await this.wazuhAuthService.get(\n-                `/syscollector/${formatedID}/netiface`,\n-                null,\n-                this.dataTimeout,\n-            );\n-            const netaddr = await this.wazuhAuthService.get(\n-                `/syscollector/${formatedID}/netaddr`,\n-                null,\n-                this.dataTimeout,\n-            );\n-            const ports = await this.wazuhAuthService.get(\n-                `/syscollector/${formatedID}/ports`,\n-                null,\n-                this.dataTimeout,\n-            );\n-\n-            let interfacesInfo: WazuhInterfacesDTO[] = [];\n-            let portsInfo: WazuhPortsDTO[] = [];\n-            let networkInfo: WazuhNetworkSettingsDTO[] = [];\n+            const [systemInfo, netiface, netaddr, ports] = await Promise.all([\n+                this.getSystemInfo(formatedID),\n+                this.wazuhAuthService.get(`/syscollector/${formatedID}/netiface`, null, this.dataTimeout),\n+                this.wazuhAuthService.get(`/syscollector/${formatedID}/netaddr`, null, this.dataTimeout),\n+                this.wazuhAuthService.get(`/syscollector/${formatedID}/ports`, null, this.dataTimeout),\n+            ]);\n \n-            if (netiface.data.data.affected_items.length > 0) {\n-                interfacesInfo = netiface.data.data.affected_items.map(\n-                    (item) => ({\n-                        name: item.name ?? '',\n-                        mac: item.mac ?? '',\n-                        state: item.state ?? '',\n-                        mtu: item.mtu ?? 0,\n-                        type: item.type ?? '',\n-                        adapter: item.adapter ?? '',\n-                        scan_time: new Date(item.scan?.time ?? ''),\n-                    }),\n-                );\n-            }\n+            const interfacesInfo: WazuhInterfacesDTO[] = netiface.data.data.affected_items?.map((item) => ({\n+                name: item.name ?? '',\n+                mac: item.mac ?? '',\n+                state: item.state ?? '',\n+                mtu: item.mtu ?? 0,\n+                type: item.type ?? '',\n+                adapter: item.adapter ?? '',\n+                scan_time: new Date(item.scan?.time ?? ''),\n+            })) || [];\n+\n+            const portsInfo: WazuhPortsDTO[] = ports.data.data.affected_items?.map((item) => ({\n+                local_port: item.local?.port ?? 0,\n+                local_id: item.local?.ip ?? '',\n+                process: item.process ?? '',\n+                state: item.state ?? '',\n+                protocol: item.protocol ?? '',\n+            })) || [];\n+\n+            const networkInfo: WazuhNetworkSettingsDTO[] = netaddr.data.data.affected_items?.map((item) => ({\n+                iface: item.iface ?? '',\n+                address: item.address ?? '',\n+                netmask: item.netmask ?? '',\n+                proto: item.proto ?? '',\n+                broadcast: item.broadcast ?? '',\n+            })) || [];\n+\n+            const paginatedInterfacesInfo: OutPaginateInterface<WazuhInterfacesDTO> = {\n+                content: interfacesInfo.slice((interfacePage - 1) * interfacePageSize, interfacePage * interfacePageSize),\n+                page: interfacePage,\n+                pageSize: interfacePageSize,\n+                total: interfacesInfo.length,\n+            };\n \n-            if (ports.data.data.affected_items.length > 0) {\n-                portsInfo = ports.data.data.affected_items.map((item) => ({\n-                    local_port: item.local?.port ?? 0,\n-                    local_id: item.local?.ip ?? '',\n-                    process: item.process ?? '',\n-                    state: item.state ?? '',\n-                    protocol: item.protocol ?? '',\n-                }));\n-            }\n+            const paginatedPortsInfo: OutPaginateInterface<WazuhPortsDTO> = {\n+                content: portsInfo.slice((portPage - 1) * portPageSize, portPage * portPageSize),\n+                page: portPage,\n+                pageSize: portPageSize,\n+                total: portsInfo.length,\n+            };\n \n-            if (netaddr.data.data.affected_items.length > 0) {\n-                networkInfo = netaddr.data.data.affected_items.map((item) => ({\n-                    iface: item.iface ?? '',\n-                    address: item.address ?? '',\n-                    netmask: item.netmask ?? '',\n-                    proto: item.proto ?? '',\n-                    broadcast: item.broadcast ?? '',\n-                }));\n-            }\n+            const paginatedNetworkInfo: OutPaginateInterface<WazuhNetworkSettingsDTO> = {\n+                content: networkInfo.slice((networkPage - 1) * networkPageSize, networkPage * networkPageSize),\n+                page: networkPage,\n+                pageSize: networkPageSize,\n+                total: networkInfo.length,\n+            };\n \n             const outputDTO: InventoryNetworkOutputDTO = {\n                 system: systemInfo,\n-                interfaces: interfacesInfo,\n-                ports: portsInfo,\n-                config: networkInfo,\n-                total_interfaces: interfacesInfo.length,\n-                total_ports: portsInfo.length,\n-                total_network_settings: networkInfo.length,\n+                interfaces: paginatedInterfacesInfo,\n+                ports: paginatedPortsInfo,\n+                config: paginatedNetworkInfo,\n             };\n \n             return outputDTO;\n         } catch (error) {\n             throw new ErrorManager({\n-                type:\n-                    (HttpStatus[\n-                        error.statusCode || error.status\n-                    ] as keyof typeof HttpStatus) || 'INTERNAL_SERVER_ERROR',\n+                type: (HttpStatus[error.statusCode || error.status] as keyof typeof HttpStatus) || 'INTERNAL_SERVER_ERROR',\n                 message: error.message || 'Error inesperado',\n             });\n         }\n     }\n \n-    public async getDataProcesses(id: number, user: UserActiveInterface) {\n+    public async getDataProcesses(\n+        id: number,\n+        user: UserActiveInterface,\n+        page = 1,\n+        pageSize = 10,\n+    ): Promise<InventoryProcessesOutputDTO> {\n         if (!(await this.checkAgentPermissions(user.id, id))) {\n             throw new ErrorManager({\n                 type: 'FORBIDDEN',\n-                message: this.i18n.t('error.WAZUH.NOT_FOUND', {\n-                    lang: user.language,\n-                }),\n+                message: this.i18n.t('error.WAZUH.NOT_FOUND', { lang: user.language }),\n             });\n         }\n \n         const agent = await this.wazuhBaseService.getAgentById(id);\n-\n         if (!agent) {\n             throw new ErrorManager({\n                 type: 'NOT_FOUND',\n-                message: this.i18n.t('error.WAZUH.NOT_FOUND', {\n-                    lang: user.language,\n-                }),\n+                message: this.i18n.t('error.WAZUH.NOT_FOUND', { lang: user.language }),\n             });\n         }\n \n         const formatedID = agent.agent_id.toString().padStart(3, '0');\n-\n         const systemInfo = await this.getSystemInfo(formatedID);\n-        const processes = await this.wazuhAuthService.get(\n+        const processesResponse = await this.wazuhAuthService.get(\n             `/syscollector/${formatedID}/processes`,\n             null,\n             this.dataTimeout,\n         );\n \n-        let processesInfo: WazuhProcessesDTO[] = [];\n+        const processesData = processesResponse?.data?.data?.affected_items || [];\n+        const totalProcesses = processesData.length;\n+\n+        const paginatedProcesses = processesData\n+            .slice((page - 1) * pageSize, page * pageSize)\n+            .map(\n+                (item): WazuhProcessesDTO => ({\n+                    name: item.name ?? '',\n+                    pid: item.pid ?? '',\n+                    ppid: item.ppid ?? 0,\n+                    vm_size: item.vm_size ?? 0,\n+                    priority: item.priority ?? 0,\n+                    nlwp: item.nlwp ?? 0,\n+                    command: item.cmd ?? '',\n+                    start_time: item.start_time ?? 0,\n+                    scan_time: new Date(item.scan?.time ?? ''),\n+                }),\n+            );\n \n-        if (processes.data.data.affected_items.length > 0) {\n-            processesInfo = processes.data.data.affected_items.map((item) => ({\n-                name: item.name ?? '',\n-                pid: item.pid ?? '',\n-                ppid: item.ppid ?? 0,\n-                vm_size: item.vm_size ?? 0,\n-                priority: item.priority ?? 0,\n-                nlwp: item.nlwp ?? 0,\n-                command: item.cmd ?? '',\n-                start_time: item.start_time ?? 0,\n-                scan_time: new Date(item.scan?.time ?? ''),\n-            }));\n-        }\n+        const paginatedInfo: OutPaginateInterface<WazuhProcessesDTO> = {\n+            content: paginatedProcesses,\n+            page,\n+            pageSize,\n+            total: totalProcesses,\n+        };\n \n-        const outputDTO: InventoryProcessesOutputDTO = {\n+        return {\n             system: systemInfo,\n-            processes: processesInfo,\n-            total_processes: processesInfo.length,\n+            processes: paginatedInfo,\n         };\n-\n-        return outputDTO;\n     }\n \n-    public async getSystemInfo(formatedID: string): Promise<SystemInfoDTO[]> {\n+    public async getSystemInfo(formatedID: string): Promise<SystemInfoDTO> {\n         const hardware = await this.wazuhAuthService.get(\n             `/syscollector/${formatedID}/hardware`,\n             null,\n@@ -298,13 +313,13 @@ export class WazuhInventoryService {\n             this.dataTimeout,\n         );\n \n-        let systemInfo: SystemInfoDTO[] = [];\n+        let systemInfo: SystemInfoDTO = null;\n \n         if (\n             operativeSystem.data.data.affected_items.length > 0 &&\n             hardware.data.data.affected_items.length > 0\n         ) {\n-            systemInfo = [\n+            systemInfo = \n                 {\n                     hostname:\n                         operativeSystem.data.data.affected_items[0]?.hostname ??\n@@ -326,8 +341,7 @@ export class WazuhInventoryService {\n                         operativeSystem.data.data.affected_items[0]?.scan\n                             ?.time ?? '',\n                     ),\n-                },\n-            ];\n+                };\n         }\n \n         return systemInfo;","src/wazuh/services/wazuh.service.ts":"@@ -116,16 +116,40 @@ export class WazuhService {\n         );\n     }\n \n-    public async getDataSoftware(id: number, user: UserActiveInterface) {\n-        return this.wazuhInventoryService.getDataSoftware(id, user);\n+    public async getDataSoftware(\n+        id: number,\n+        user: UserActiveInterface,\n+        updatesPage = 1,\n+        updatesPageSize = 10,\n+        packagesPage = 1,\n+        packagesPageSize = 10\n+    ) {\n+        return this.wazuhInventoryService.getDataSoftware(id, user, updatesPage, updatesPageSize, packagesPage, packagesPageSize);\n     }\n \n-    public async getDataNetwork(id: number, user: UserActiveInterface) {\n-        return this.wazuhInventoryService.getDataNetwork(id, user);\n+    public async getDataNetwork(\n+        id: number,\n+        user: UserActiveInterface,\n+        interfacePage = 1,\n+        interfacePageSize = 10,\n+        portPage = 1,\n+        portPageSize = 10,\n+        networkPage = 1,    \n+        networkPageSize = 10,) {\n+        return this.wazuhInventoryService.getDataNetwork(\n+            id,\n+            user,\n+            interfacePage,\n+            interfacePageSize,\n+            portPage,\n+            portPageSize,\n+            networkPage,\n+            networkPageSize,\n+        );\n     }\n \n-    public async getDataProcesses(id: number, user: UserActiveInterface) {\n-        return this.wazuhInventoryService.getDataProcesses(id, user);\n+    public async getDataProcesses(id: number, user: UserActiveInterface, page = 1, pageSize = 10) {\n+        return this.wazuhInventoryService.getDataProcesses(id, user, page, pageSize); \n     }\n \n     public async getAlertsForAgent("}